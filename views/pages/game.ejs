<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" rel="stylesheet">

    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <title>Multi Snake</title>

    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <p><%= username %></p>

    <canvas id="canvas" style="border: 1px solid #FF0000"></canvas>

    <script>
      var socket = io();
      const USERNAME = '<%= username %>';
      const CANVAS_WIDTH = 200;
      const CANVAS_HEIGHT = 200;
      const SNAKE_SIZE = 20;
      const SNAKE_COLOR = '#00FF00';
      // Maybe try keeping an old and new board and only updating differences? instead of wiping and replacing?
      var board;
      const canvas = document.getElementById('canvas');
      canvas.width = CANVAS_WIDTH;
      canvas.height = CANVAS_HEIGHT;
      const ctx = canvas.getContext('2d');
      var connected = false;

      var lastTime = Date.now();

      document.addEventListener('keydown', event => {
        switch (event.keyCode) {
          case 87: // W
            socket.emit('change direction', 'up');
            break;
          case 65: // A
            socket.emit('change direction', 'left');
            break;
          case 83: // S
            socket.emit('change direction', 'down');
            break;
          case 68: // D
            socket.emit('change direction', 'right');
            break;
          default:
            break;
        }
      });

      // Renders according to hex values in board
      function render() {
        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
        for (let row = 0, height = CANVAS_HEIGHT / SNAKE_SIZE; row < height; row++) {
          for (let col = 0, width = CANVAS_WIDTH / SNAKE_SIZE; col < width; col++) {
            // dont do if old board[row][col] is already the same ?
            ctx.fillStyle = board[row][col];
            ctx.fillRect(SNAKE_SIZE * col, SNAKE_SIZE * row, SNAKE_SIZE, SNAKE_SIZE);
          }
        }
      }


      socket.on('new board', newBoard => {
        if (!connected) {
          socket.emit('new player', USERNAME);
          connected = true;
        }
        console.log('Took ' + (Date.now() - lastTime).toString() + ' milliseconds.');
        lastTime = Date.now();
        board = newBoard;
        render();
      });

      socket.on('initial position', pos => {
        ctx.fillStyle = SNAKE_COLOR;
        ctx.fillRect(SNAKE_SIZE * pos.x, SNAKE_SIZE * pos.y, SNAKE_SIZE, SNAKE_SIZE);
        console.log('Initial position received');
      });

      socket.on('disconnect', () => {
        console.log('Player Lost...Redirecting');
        setTimeout(() => { window.location.replace('/') }, 2000);
      });

    </script>

  </body>
</html>
